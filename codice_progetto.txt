============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\index.html
============================================
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Frontend</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>




============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\main.server.ts
============================================
import { bootstrapApplication } from '@angular/platform-browser';
import { App } from './app/app';
import { config } from './app/app.config.server';

const bootstrap = () => bootstrapApplication(App, config);

export default bootstrap;




============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\main.ts
============================================
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { App } from './app/app';

bootstrapApplication(App, appConfig)
  .catch((err) => console.error(err));




============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\server.ts
============================================
import {
  AngularNodeAppEngine,
  createNodeRequestHandler,
  isMainModule,
  writeResponseToNodeResponse,
} from '@angular/ssr/node';
import express from 'express';
import { join } from 'node:path';

const browserDistFolder = join(import.meta.dirname, '../browser');

const app = express();
const angularApp = new AngularNodeAppEngine();

/**
 * Example Express Rest API endpoints can be defined here.
 * Uncomment and define endpoints as necessary.
 *
 * Example:
 * ```ts
 * app.get('/api/{*splat}', (req, res) => {
 *   // Handle API request
 * });
 * ```
 */

/**
 * Serve static files from /browser
 */
app.use(
  express.static(browserDistFolder, {
    maxAge: '1y',
    index: false,
    redirect: false,
  }),
);

/**
 * Handle all other requests by rendering the Angular application.
 */
app.use((req, res, next) => {
  angularApp
    .handle(req)
    .then((response) =>
      response ? writeResponseToNodeResponse(response, res) : next(),
    )
    .catch(next);
});

/**
 * Start the server if this module is the main entry point.
 * The server listens on the port defined by the `PORT` environment variable, or defaults to 4000.
 */
if (isMainModule(import.meta.url)) {
  const port = process.env['PORT'] || 4000;
  app.listen(port, (error) => {
    if (error) {
      throw error;
    }

    console.log(`Node Express server listening on http://localhost:${port}`);
  });
}

/**
 * Request handler used by the Angular CLI (for dev-server and during build) or Firebase Cloud Functions.
 */
export const reqHandler = createNodeRequestHandler(app);




============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\styles.scss
============================================
/* You can add global styles to this file, and also import other style files */




============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\app.config.server.ts
============================================
import { mergeApplicationConfig, ApplicationConfig } from '@angular/core';
import { provideServerRendering, withRoutes } from '@angular/ssr';
import { appConfig } from './app.config';
import { serverRoutes } from './app.routes.server';

const serverConfig: ApplicationConfig = {
  providers: [
    provideServerRendering(withRoutes(serverRoutes))
  ]
};

export const config = mergeApplicationConfig(appConfig, serverConfig);




============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\app.config.ts
============================================
import { ApplicationConfig, provideBrowserGlobalErrorListeners, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';
import { routes } from './app.routes';
import { provideClientHydration, withEventReplay } from '@angular/platform-browser';
import { provideHttpClient, withInterceptors } from '@angular/common/http';
import { authInterceptor } from './interceptors/auth-interceptor';

export const appConfig: ApplicationConfig = {
  providers: [
    provideBrowserGlobalErrorListeners(),
    provideZoneChangeDetection({ eventCoalescing: true }),
    provideRouter(routes), 
    provideClientHydration(withEventReplay()),
    
    /* Configurazione dell'HttpClient per usare l'Interceptor.
       Il metodo withInterceptors registra la funzione authInterceptor, 
       rendendola attiva per tutte le richieste HTTP.
    */
    provideHttpClient(
      withInterceptors([authInterceptor])
    )
  ]
};




============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\app.html
============================================
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * * * The content below * * * * * * * * * * * -->
<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->
<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * Delete the template below * * * * * * * * * -->
<!-- * * * * * * * to get started with your project! * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->

<style>
  :host {
    --bright-blue: oklch(51.01% 0.274 263.83);
    --electric-violet: oklch(53.18% 0.28 296.97);
    --french-violet: oklch(47.66% 0.246 305.88);
    --vivid-pink: oklch(69.02% 0.277 332.77);
    --hot-red: oklch(61.42% 0.238 15.34);
    --orange-red: oklch(63.32% 0.24 31.68);

    --gray-900: oklch(19.37% 0.006 300.98);
    --gray-700: oklch(36.98% 0.014 302.71);
    --gray-400: oklch(70.9% 0.015 304.04);

    --red-to-pink-to-purple-vertical-gradient: linear-gradient(
      180deg,
      var(--orange-red) 0%,
      var(--vivid-pink) 50%,
      var(--electric-violet) 100%
    );

    --red-to-pink-to-purple-horizontal-gradient: linear-gradient(
      90deg,
      var(--orange-red) 0%,
      var(--vivid-pink) 50%,
      var(--electric-violet) 100%
    );

    --pill-accent: var(--bright-blue);

    font-family: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
      "Segoe UI Symbol";
    box-sizing: border-box;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  h1 {
    font-size: 3.125rem;
    color: var(--gray-900);
    font-weight: 500;
    line-height: 100%;
    letter-spacing: -0.125rem;
    margin: 0;
    font-family: "Inter Tight", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
      "Segoe UI Symbol";
  }

  p {
    margin: 0;
    color: var(--gray-700);
  }

  main {
    width: 100%;
    min-height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 1rem;
    box-sizing: inherit;
    position: relative;
  }

  .angular-logo {
    max-width: 9.2rem;
  }

  .content {
    display: flex;
    justify-content: space-around;
    width: 100%;
    max-width: 700px;
    margin-bottom: 3rem;
  }

  .content h1 {
    margin-top: 1.75rem;
  }

  .content p {
    margin-top: 1.5rem;
  }

  .divider {
    width: 1px;
    background: var(--red-to-pink-to-purple-vertical-gradient);
    margin-inline: 0.5rem;
  }

  .pill-group {
    display: flex;
    flex-direction: column;
    align-items: start;
    flex-wrap: wrap;
    gap: 1.25rem;
  }

  .pill {
    display: flex;
    align-items: center;
    --pill-accent: var(--bright-blue);
    background: color-mix(in srgb, var(--pill-accent) 5%, transparent);
    color: var(--pill-accent);
    padding-inline: 0.75rem;
    padding-block: 0.375rem;
    border-radius: 2.75rem;
    border: 0;
    transition: background 0.3s ease;
    font-family: var(--inter-font);
    font-size: 0.875rem;
    font-style: normal;
    font-weight: 500;
    line-height: 1.4rem;
    letter-spacing: -0.00875rem;
    text-decoration: none;
    white-space: nowrap;
  }

  .pill:hover {
    background: color-mix(in srgb, var(--pill-accent) 15%, transparent);
  }

  .pill-group .pill:nth-child(6n + 1) {
    --pill-accent: var(--bright-blue);
  }
  .pill-group .pill:nth-child(6n + 2) {
    --pill-accent: var(--electric-violet);
  }
  .pill-group .pill:nth-child(6n + 3) {
    --pill-accent: var(--french-violet);
  }

  .pill-group .pill:nth-child(6n + 4),
  .pill-group .pill:nth-child(6n + 5),
  .pill-group .pill:nth-child(6n + 6) {
    --pill-accent: var(--hot-red);
  }

  .pill-group svg {
    margin-inline-start: 0.25rem;
  }

  .social-links {
    display: flex;
    align-items: center;
    gap: 0.73rem;
    margin-top: 1.5rem;
  }

  .social-links path {
    transition: fill 0.3s ease;
    fill: var(--gray-400);
  }

  .social-links a:hover svg path {
    fill: var(--gray-900);
  }

  @media screen and (max-width: 650px) {
    .content {
      flex-direction: column;
      width: max-content;
    }

    .divider {
      height: 1px;
      width: 100%;
      background: var(--red-to-pink-to-purple-horizontal-gradient);
      margin-block: 1.5rem;
    }
  }
</style>

<main class="main">
  <div class="content">
    <div class="left-side">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 982 239"
        fill="none"
        class="angular-logo"
      >
        <g clip-path="url(#a)">
          <path
            fill="url(#b)"
            d="M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z"
          />
          <path
            fill="url(#c)"
            d="M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z"
          />
        </g>
        <defs>
          <radialGradient
            id="c"
            cx="0"
            cy="0"
            r="1"
            gradientTransform="rotate(118.122 171.182 60.81) scale(205.794)"
            gradientUnits="userSpaceOnUse"
          >
            <stop stop-color="#FF41F8" />
            <stop offset=".707" stop-color="#FF41F8" stop-opacity=".5" />
            <stop offset="1" stop-color="#FF41F8" stop-opacity="0" />
          </radialGradient>
          <linearGradient
            id="b"
            x1="0"
            x2="982"
            y1="192"
            y2="192"
            gradientUnits="userSpaceOnUse"
          >
            <stop stop-color="#F0060B" />
            <stop offset="0" stop-color="#F0070C" />
            <stop offset=".526" stop-color="#CC26D5" />
            <stop offset="1" stop-color="#7702FF" />
          </linearGradient>
          <clipPath id="a"><path fill="#fff" d="M0 0h982v239H0z" /></clipPath>
        </defs>
      </svg>
      <h1>Hello, {{ title() }}</h1>
      <p>Congratulations! Your app is running. 🎉</p>
    </div>
    <div class="divider" role="separator" aria-label="Divider"></div>
    <div class="right-side">
      <div class="pill-group">
        @for (item of [
          { title: 'Explore the Docs', link: 'https://angular.dev' },
          { title: 'Learn with Tutorials', link: 'https://angular.dev/tutorials' },
          { title: 'Prompt and best practices for AI', link: 'https://angular.dev/ai/develop-with-ai'},
          { title: 'CLI Docs', link: 'https://angular.dev/tools/cli' },
          { title: 'Angular Language Service', link: 'https://angular.dev/tools/language-service' },
          { title: 'Angular DevTools', link: 'https://angular.dev/tools/devtools' },
        ]; track item.title) {
          <a
            class="pill"
            [href]="item.link"
            target="_blank"
            rel="noopener"
          >
            <span>{{ item.title }}</span>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              height="14"
              viewBox="0 -960 960 960"
              width="14"
              fill="currentColor"
            >
              <path
                d="M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h280v80H200v560h560v-280h80v280q0 33-23.5 56.5T760-120H200Zm188-212-56-56 372-372H560v-80h280v280h-80v-144L388-332Z"
              />
            </svg>
          </a>
        }
      </div>
      <div class="social-links">
        <a
          href="https://github.com/angular/angular"
          aria-label="Github"
          target="_blank"
          rel="noopener"
        >
          <svg
            width="25"
            height="24"
            viewBox="0 0 25 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            alt="Github"
          >
            <path
              d="M12.3047 0C5.50634 0 0 5.50942 0 12.3047C0 17.7423 3.52529 22.3535 8.41332 23.9787C9.02856 24.0946 9.25414 23.7142 9.25414 23.3871C9.25414 23.0949 9.24389 22.3207 9.23876 21.2953C5.81601 22.0377 5.09414 19.6444 5.09414 19.6444C4.53427 18.2243 3.72524 17.8449 3.72524 17.8449C2.61064 17.082 3.81137 17.0973 3.81137 17.0973C5.04697 17.1835 5.69604 18.3647 5.69604 18.3647C6.79321 20.2463 8.57636 19.7029 9.27978 19.3881C9.39052 18.5924 9.70736 18.0499 10.0591 17.7423C7.32641 17.4347 4.45429 16.3765 4.45429 11.6618C4.45429 10.3185 4.9311 9.22133 5.72065 8.36C5.58222 8.04931 5.16694 6.79833 5.82831 5.10337C5.82831 5.10337 6.85883 4.77319 9.2121 6.36459C10.1965 6.09082 11.2424 5.95546 12.2883 5.94931C13.3342 5.95546 14.3801 6.09082 15.3644 6.36459C17.7023 4.77319 18.7328 5.10337 18.7328 5.10337C19.3942 6.79833 18.9789 8.04931 18.8559 8.36C19.6403 9.22133 20.1171 10.3185 20.1171 11.6618C20.1171 16.3888 17.2409 17.4296 14.5031 17.7321C14.9338 18.1012 15.3337 18.8559 15.3337 20.0084C15.3337 21.6552 15.3183 22.978 15.3183 23.3779C15.3183 23.7009 15.5336 24.0854 16.1642 23.9623C21.0871 22.3484 24.6094 17.7341 24.6094 12.3047C24.6094 5.50942 19.0999 0 12.3047 0Z"
            />
          </svg>
        </a>
        <a
          href="https://twitter.com/angular"
          aria-label="Twitter"
          target="_blank"
          rel="noopener"
        >
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            alt="Twitter"
          >
            <path
              d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"
            />
          </svg>
        </a>
        <a
          href="https://www.youtube.com/channel/UCbn1OgGei-DV7aSRo_HaAiw"
          aria-label="Youtube"
          target="_blank"
          rel="noopener"
        >
          <svg
            width="29"
            height="20"
            viewBox="0 0 29 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            alt="Youtube"
          >
            <path
              fill-rule="evenodd"
              clip-rule="evenodd"
              d="M27.4896 1.52422C27.9301 1.96749 28.2463 2.51866 28.4068 3.12258C29.0004 5.35161 29.0004 10 29.0004 10C29.0004 10 29.0004 14.6484 28.4068 16.8774C28.2463 17.4813 27.9301 18.0325 27.4896 18.4758C27.0492 18.9191 26.5 19.2389 25.8972 19.4032C23.6778 20 14.8068 20 14.8068 20C14.8068 20 5.93586 20 3.71651 19.4032C3.11363 19.2389 2.56449 18.9191 2.12405 18.4758C1.68361 18.0325 1.36732 17.4813 1.20683 16.8774C0.613281 14.6484 0.613281 10 0.613281 10C0.613281 10 0.613281 5.35161 1.20683 3.12258C1.36732 2.51866 1.68361 1.96749 2.12405 1.52422C2.56449 1.08095 3.11363 0.76113 3.71651 0.596774C5.93586 0 14.8068 0 14.8068 0C14.8068 0 23.6778 0 25.8972 0.596774C26.5 0.76113 27.0492 1.08095 27.4896 1.52422ZM19.3229 10L11.9036 5.77905V14.221L19.3229 10Z"
            />
          </svg>
        </a>
      </div>
    </div>
  </div>
</main>

<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * * * The content above * * * * * * * * * * * * -->
<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * * -->
<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * * End of Placeholder  * * * * * * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->


<router-outlet />




============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\app.routes.server.ts
============================================
import { RenderMode, ServerRoute } from '@angular/ssr';

export const serverRoutes: ServerRoute[] = [
  {
    path: '**',
    renderMode: RenderMode.Prerender
  }
];




============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\app.routes.ts
============================================
import { Routes } from '@angular/router';

export const routes: Routes = [];




============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\app.scss
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\app.spec.ts
============================================
import { TestBed } from '@angular/core/testing';
import { App } from './app';

describe('App', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [App],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(App);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(App);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, frontend');
  });
});




============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\app.ts
============================================
import { Component, signal } from '@angular/core';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  imports: [RouterOutlet],
  templateUrl: './app.html',
  styleUrl: './app.scss'
})
export class App {
  protected readonly title = signal('frontend');
}




============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\auth\login\login.component.html
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\auth\login\login.component.scss
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\auth\login\login.component.ts
============================================
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { Router, ActivatedRoute, RouterModule } from '@angular/router';
import { AuthService } from '../../../services/auth.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss'],
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, RouterModule]
})
export class LoginComponent implements OnInit {
  loginForm: FormGroup;
  loading = false;
  errorMessage = '';
  successMessage = '';

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router,
    private route: ActivatedRoute
  ) {
    this.loginForm = this.fb.group({
      username: ['', Validators.required],
      password: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    // Verifica se l'utente arriva dalla registrazione
    this.route.queryParams.subscribe(params => {
      if (params['registered'] === 'true') {
        this.successMessage = 'Registrazione completata! Effettua il login.';
        
        // Rimuovi il parametro dall'URL
        this.router.navigate(
          [], 
          {
            relativeTo: this.route,
            queryParams: {},
            replaceUrl: true
          }
        );
      }
    });
  }

  onSubmit(): void {
    if (this.loginForm.invalid) {
      return;
    }
    
    this.loading = true;
    this.errorMessage = '';
    this.successMessage = '';
    
    const { username, password } = this.loginForm.value;
    
    this.authService.login(username, password).subscribe({
      next: () => {
        /* Dopo il login riuscito, verifico se esiste un URL di ritorno.
           Se l'utente è stato reindirizzato dall'auth guard, uso quell'URL,
           altrimenti lo mando alla pagina principale dei ristoranti.
        */
        const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/restaurants';
        
        // Uso navigateByUrl perché returnUrl è già un percorso completo
        this.router.navigateByUrl(returnUrl);
      },
      error: (errorMessage: string) => {
        /* Gestisco l'errore ricevuto dall'AuthService.
           Grazie al pattern di gestione centralizzata degli errori,
           ricevo direttamente una stringa leggibile dall'utente.
        */
        this.errorMessage = errorMessage;
        this.loading = false;
      },
      complete: () => {
        this.loading = false;
      }
    });
  }
}



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\auth\register\register.component.html
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\auth\register\register.component.scss
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\auth\register\register.component.ts
============================================
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators, AbstractControl, ValidationErrors } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from '../../../services/auth.service';

@Component({
  selector: 'app-register',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.scss']
})
export class RegisterComponent {
  registerForm: FormGroup;
  errorMessage = '';
  loading = false;
  
  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router
  ) {
    /* Creo il form di registrazione con validazione integrata.
       Uso i validator di Angular per garantire che tutti i campi rispettino
       i requisiti minimi di sicurezza e formato.
    */
    this.registerForm = this.fb.group({
      username: ['', [
        Validators.required,
        Validators.minLength(3),
        Validators.maxLength(20)
      ]],
      email: ['', [
        Validators.required,
        Validators.email
      ]],
      password: ['', [
        Validators.required,
        Validators.minLength(6),
        Validators.pattern(/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,}$/) // Almeno una lettera e un numero
      ]],
      confirmPassword: ['', [
        Validators.required
      ]]
    }, {
      validators: (formGroup: AbstractControl): ValidationErrors | null => {
        const password = formGroup.get('password')?.value;
        const confirmPassword = formGroup.get('confirmPassword')?.value;
        
        return password === confirmPassword ? null : { passwordsMismatch: true };
      }
    });
  }
  
  /* Gestisce l'invio del form di registrazione.
     Invia i dati al server tramite AuthService e gestisce sia il successo che l'errore.
  */
  onSubmit(): void {
    if (this.registerForm.invalid) {
      // Marco tutti i campi come touched per mostrare gli errori di validazione
      Object.keys(this.registerForm.controls).forEach(key => {
        const control = this.registerForm.get(key);
        control?.markAsTouched();
      });
      return;
    }
    
    this.loading = true;
    this.errorMessage = '';
    
    const { username, email, password } = this.registerForm.value;
    
    this.authService.register(username, email, password).subscribe({
      next: () => {
        /* Registrazione completata con successo, reindirizzo alla pagina di login
           con un messaggio di conferma.
        */
        this.router.navigate(['/login'], { 
          queryParams: { registered: 'true' } 
        });
      },
      error: (errorMessage: string) => {
        /* Gestisco l'errore ricevuto dall'AuthService.
           Grazie al pattern di gestione centralizzata degli errori,
           ricevo direttamente una stringa leggibile dall'utente.
        */
        this.errorMessage = errorMessage;
        this.loading = false;
      },
      complete: () => {
        this.loading = false;
      }
    });
  }
  
  /* Utility per ottenere facilmente i messaggi di errore per i campi del form.
     Uso questo metodo nel template per mostrare feedback appropriati all'utente.
  */
  getErrorMessage(controlName: string): string {
    const control = this.registerForm.get(controlName);
    
    if (!control || !control.errors || !control.touched) {
      return '';
    }
    
    if (control.errors['required']) {
      return 'Questo campo è obbligatorio';
    }
    
    if (control.errors['minlength']) {
      return `Minimo ${control.errors['minlength'].requiredLength} caratteri`;
    }
    
    if (control.errors['email']) {
      return 'Inserisci un indirizzo email valido';
    }
    
    if (control.errors['pattern']) {
      return 'La password deve contenere almeno una lettera e un numero';
    }
    
    return 'Campo non valido';
  }
  
  /* Verifica se le password inserite non corrispondono.
     Mostro un messaggio di errore appropriato solo quando entrambi i campi
     sono stati compilati.
  */
  passwordsDoNotMatch(): boolean {
    const passwordControl = this.registerForm.get('password');
    const confirmControl = this.registerForm.get('confirmPassword');
    
    if (!passwordControl?.touched || !confirmControl?.touched) {
      return false;
    }
    
    return passwordControl.value !== confirmControl.value;
  }
}



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\home\home.component.html
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\home\home.component.scss
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\home\home.component.ts
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\restaurants\restaurant-detail\rest-detail.component.html
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\restaurants\restaurant-detail\rest-detail.component.scss
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\restaurants\restaurant-detail\rest-detail.component.ts
============================================
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { catchError, forkJoin, Observable, of, switchMap } from 'rxjs';
import { Restaurant } from '../../../models/restaurant.model';
import { Review } from '../../../models/review.model';
import { RestaurantService } from '../../../services/restaurant.service';
import { ReviewService } from '../../../services/review.service';
import { AuthService } from '../../../services/auth.service';
import { LoadingSpinnerComponent } from '../../../shared/loading-spinner/loading';
import { User } from '../../../models/user.model';
import { VoteService } from '../../../services/vote.service';
import { VoteType } from '../../../models/vote.model';

@Component({
  selector: 'app-rest-detail',
  standalone: true,
  imports: [CommonModule, RouterModule, LoadingSpinnerComponent],
  templateUrl: './rest-detail.component.html',
  styleUrls: ['./rest-detail.component.scss']
})
export class RestDetailComponent implements OnInit {
  restaurant: Restaurant | null = null;
  reviews: Review[] = [];
  loading = true;
  errorMessage = '';
  currentUser: User | null = null;
  canEdit = false;
  totalReviews = 0;
  currentPage = 1;
  reviewsPerPage = 5;
  sortBy: 'votes' | 'date' = 'votes';
  isOwner = false;
  
  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private restaurantService: RestaurantService,
    private reviewService: ReviewService,
    private authService: AuthService,
    private voteService: VoteService
  ) {}

  ngOnInit(): void {
    this.currentUser = this.authService.getCurrentUser();
    
    // Leggo l'ID del ristorante dalla URL e carico i dati
    this.route.paramMap.pipe(
      switchMap(params => {
        const restaurantId = Number(params.get('id'));
        if (isNaN(restaurantId)) {
          return of(null);
        }
        
        this.loading = true;
        
        // Utilizzo forkJoin per caricare in parallelo i dati del ristorante e le recensioni
        return forkJoin({
          restaurant: this.restaurantService.getRestaurantById(restaurantId),
          reviewsData: this.reviewService.getReviewsByRestaurant(
            restaurantId, 
            this.currentPage, 
            this.reviewsPerPage,
            this.sortBy
          )
        }).pipe(
          catchError(error => {
            this.errorMessage = error;
            this.loading = false;
            return of({ restaurant: null, reviewsData: { reviews: [], total: 0 } });
          })
        );
      })
    ).subscribe(data => {
      if (!data) {
        this.errorMessage = 'Ristorante non trovato';
        this.loading = false;
        return;
      }
      
      this.restaurant = data.restaurant;
      this.reviews = data.reviewsData.reviews;
      this.totalReviews = data.reviewsData.total;
      
      // Se il ristorante esiste, verifico se l'utente corrente può modificarlo
      if (this.restaurant && this.currentUser) {
        this.isOwner = this.restaurant.ownerId === this.currentUser.id;
      }
      
      this.loading = false;
    });
  }
  
  /* Ricarica le recensioni quando cambia la pagina o l'ordinamento
  */
  loadReviews(page?: number, sortBy?: 'votes' | 'date'): void {
    if (page) this.currentPage = page;
    if (sortBy) this.sortBy = sortBy;
    
    if (!this.restaurant) return;
    
    this.loading = true;
    
    this.reviewService.getReviewsByRestaurant(
      this.restaurant.id,
      this.currentPage,
      this.reviewsPerPage,
      this.sortBy
    ).subscribe({
      next: (data) => {
        this.reviews = data.reviews;
        this.totalReviews = data.total;
        this.loading = false;
      },
      error: (error) => {
        this.errorMessage = error;
        this.loading = false;
      }
    });
  }
  
  /* Gestisce il cambio di pagina nella paginazione
  */
  onPageChange(page: number): void {
    if (page !== this.currentPage && page > 0 && page <= this.totalPages) {
      this.loadReviews(page);
    }
  }
  
  /* Cambia l'ordinamento delle recensioni
  */
  changeSortOrder(sortBy: 'votes' | 'date'): void {
    if (this.sortBy !== sortBy) {
      this.loadReviews(1, sortBy);
    }
  }
  
  /* Gestisce l'eliminazione del ristorante
  */
  deleteRestaurant(): void {
    if (!this.restaurant || !confirm('Sei sicuro di voler eliminare questo ristorante? Questa azione non può essere annullata.')) {
      return;
    }
    
    this.loading = true;
    
    this.restaurantService.deleteRestaurant(this.restaurant.id).subscribe({
      next: () => {
        this.router.navigate(['/restaurants'], { 
          queryParams: { deleted: 'true' } 
        });
      },
      error: (error) => {
        this.errorMessage = error;
        this.loading = false;
      }
    });
  }
  
  /* Gestisce l'upvote di una recensione
  */
  upvoteReview(reviewId: number, index: number): void {
    if (!this.authService.isLoggedIn) {
      this.router.navigate(['/login'], {
        queryParams: { returnUrl: this.router.url }
      });
      return;
    }
    
    this.voteService.upvoteReview(reviewId).subscribe({
      next: () => this.updateReviewAfterVote(index),
      error: (error) => this.errorMessage = error
    });
  }
  
  /* Gestisce il downvote di una recensione
  */
  downvoteReview(reviewId: number, index: number): void {
    if (!this.authService.isLoggedIn) {
      this.router.navigate(['/login'], {
        queryParams: { returnUrl: this.router.url }
      });
      return;
    }
    
    this.voteService.downvoteReview(reviewId).subscribe({
      next: () => this.updateReviewAfterVote(index),
      error: (error) => this.errorMessage = error
    });
  }
  
  /* Aggiorna i dati della recensione dopo un voto
  */
  private updateReviewAfterVote(index: number): void {
    if (!this.restaurant) return;
    
    // Ricarico la recensione specifica per aggiornare il conteggio dei voti
    this.reviewService.getReviewById(this.reviews[index].id).subscribe({
      next: (updatedReview) => {
        this.reviews[index] = updatedReview;
      },
      error: (error) => this.errorMessage = error
    });
  }
  
  /* Calcola il numero totale di pagine per la paginazione
  */
  get totalPages(): number {
    return Math.ceil(this.totalReviews / this.reviewsPerPage);
  }
  
  /* Genera un array di numeri di pagina da visualizzare
  */
  get pageNumbers(): number[] {
    const pages = [];
    const maxVisiblePages = 5;
    let startPage = Math.max(1, this.currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(this.totalPages, startPage + maxVisiblePages - 1);
    
    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    for (let i = startPage; i <= endPage; i++) {
      pages.push(i);
    }
    
    return pages;
  }
}



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\restaurants\restaurant-form\rest-form.component.html
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\restaurants\restaurant-form\rest-form.component.scss
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\restaurants\restaurant-form\rest-form.component.ts
============================================
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { catchError, of, switchMap } from 'rxjs';
import { Restaurant, CreateRestaurantDto, UpdateRestaurantDto } from '../../../models/restaurant.model';
import { RestaurantService } from '../../../services/restaurant.service';
import { AuthService } from '../../../services/auth.service';
import { LoadingSpinnerComponent } from '../../../shared/loading-spinner/loading';

@Component({
  selector: 'app-rest-form',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    RouterModule,
    LoadingSpinnerComponent
  ],
  templateUrl: './rest-form.component.html',
  styleUrls: ['./rest-form.component.scss']
})
export class RestFormComponent implements OnInit {
  restaurantForm!: FormGroup;
  isEditMode = false;
  restaurantId?: number;
  loading = false;
  errorMessage = '';
  imagePreview: string | null = null;
  selectedFile: File | undefined;
  
  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private restaurantService: RestaurantService,
    private authService: AuthService
  ) {}
  
  ngOnInit(): void {
    // Inizializzazione del form
    this.createForm();
    
    // Verifico se siamo in modalità modifica leggendo l'ID dalla URL
    this.route.paramMap.pipe(
      switchMap(params => {
        const id = params.get('id');
        
        if (id) {
          this.isEditMode = true;
          this.restaurantId = +id;
          this.loading = true;
          
          // Carico i dati del ristorante esistente
          return this.restaurantService.getRestaurantById(+id).pipe(
            catchError(error => {
              this.errorMessage = error;
              this.loading = false;
              return of(null);
            })
          );
        }
        
        return of(null); // Modalità creazione, nessun ristorante da caricare
      })
    ).subscribe(restaurant => {
      if (restaurant) {
        // Popolamento del form con i dati esistenti
        this.populateForm(restaurant);
        
        // Verifica che l'utente corrente sia il proprietario
        const currentUser = this.authService.getCurrentUser();
        if (!currentUser || currentUser.id !== restaurant.ownerId) {
          this.errorMessage = 'Non sei autorizzato a modificare questo ristorante.';
          this.restaurantForm.disable();
        }
      }
      
      this.loading = false;
    });
  }
  
  /* Crea il form con i controlli necessari e le validazioni
  */
  private createForm(): void {
    this.restaurantForm = this.fb.group({
      name: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],
      description: ['', [Validators.required, Validators.minLength(20), Validators.maxLength(1000)]],
      location: this.fb.group({
        address: ['', [Validators.required]],
        lat: [0, [Validators.required]],
        lng: [0, [Validators.required]]
      })
      // L'immagine viene gestita separatamente poiché non è un FormControl standard
    });
  }
  
  /* Popola il form con i dati del ristorante esistente
  */
  private populateForm(restaurant: Restaurant): void {
    this.restaurantForm.patchValue({
      name: restaurant.name,
      description: restaurant.description,
      location: {
        address: restaurant.location.address,
        lat: restaurant.location.lat,
        lng: restaurant.location.lng
      }
    });
    
    // Se il ristorante ha un'immagine, mostro l'anteprima
    if (restaurant.imageUrl) {
      this.imagePreview = restaurant.imageUrl;
    }
  }
  
  /* Gestisce il cambio del file immagine
  */
  onFileChange(event: Event): void {
    const input = event.target as HTMLInputElement;
    
    if (input.files && input.files.length) {
      const file = input.files[0];
      this.selectedFile = file;
      
      // Creo un'anteprima dell'immagine
      const reader = new FileReader();
      reader.onload = () => {
        this.imagePreview = reader.result as string;
      };
      reader.readAsDataURL(file);
    }
  }
  
  /* Rimuove l'immagine selezionata
  */
  removeImage(): void {
    this.selectedFile = undefined;
    this.imagePreview = null;
    
    // Reset del campo input file (utile per consentire la selezione dello stesso file)
    const fileInput = document.getElementById('restaurant-image') as HTMLInputElement;
    if (fileInput) {
      fileInput.value = '';
    }
  }
  
  /* Aggiorna le coordinate quando l'indirizzo cambia (simulato)
     In un'implementazione reale, qui si userebbe un servizio di geocoding
  */
  updateCoordinates(): void {
    // Simulazione di geocoding - in un'app reale, qui chiameresti un servizio come Google Maps
    const address = this.restaurantForm.get('location.address')?.value;
    if (address) {
      // Genera coordinate casuali per demo
      const lat = 45 + Math.random();
      const lng = 9 + Math.random();
      
      this.restaurantForm.patchValue({
        location: {
          lat,
          lng
        }
      });
    }
  }
  
  /* Gestisce l'invio del form
  */
  onSubmit(): void {
    if (this.restaurantForm.invalid) {
      // Marca tutti i campi come touched per mostrare gli errori
      Object.keys(this.restaurantForm.controls).forEach(key => {
        const control = this.restaurantForm.get(key);
        control?.markAsTouched();
      });
      return;
    }
    
    this.loading = true;
    this.errorMessage = '';
    
    const formValue = this.restaurantForm.value;
    
    if (this.isEditMode && this.restaurantId) {
      // Modalità modifica
      const updateData: UpdateRestaurantDto = {
        name: formValue.name,
        description: formValue.description,
        location: formValue.location
      };
      
      // Aggiungo l'immagine solo se è stata selezionata una nuova
      if (this.selectedFile) {
        updateData.image = this.selectedFile;
      }
      
      this.restaurantService.updateRestaurant(this.restaurantId, updateData).subscribe({
        next: (restaurant) => {
          this.loading = false;
          this.router.navigate(['/restaurants', restaurant.id]);
        },
        error: (error) => {
          this.errorMessage = error;
          this.loading = false;
        }
      });
    } else {
      // Modalità creazione
      const createData: CreateRestaurantDto = {
        name: formValue.name,
        description: formValue.description,
        location: formValue.location,
        image: this.selectedFile
      };
      
      this.restaurantService.createRestaurant(createData).subscribe({
        next: (restaurant) => {
          this.loading = false;
          this.router.navigate(['/restaurants', restaurant.id]);
        },
        error: (error) => {
          this.errorMessage = error;
          this.loading = false;
        }
      });
    }
  }
  
  /* Getter per i controlli del form (usati nel template)
  */
  get nameControl() { return this.restaurantForm.get('name'); }
  get descriptionControl() { return this.restaurantForm.get('description'); }
  get addressControl() { return this.restaurantForm.get('location.address'); }
}



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\restaurants\restaurant-list\rest-list.component.html
============================================
<div class="restaurant-list-container">
  <div class="search-section">
    <h1>Scopri i Ristoranti Fantasiosi</h1>
    <p>Esplora la nostra collezione di ristoranti immaginari e divertenti</p>
    
    <div class="search-bar">
      <input 
        type="text" 
        placeholder="Cerca ristoranti..." 
        [ngModel]="searchTerm"
        (ngModelChange)="onSearch($event)"
      >
      <button class="search-button">
        <i class="fas fa-search"></i>
      </button>
    </div>
  </div>
  
  <div *ngIf="loading">
    <app-loading-spinner></app-loading-spinner>
  </div>
  
  <div *ngIf="errorMessage" class="error-message">
    {{ errorMessage }}
  </div>
  
  <div *ngIf="!loading && !errorMessage">
    <!-- No results message -->
    <div *ngIf="restaurants.length === 0" class="no-results">
      <h3>Nessun ristorante trovato</h3>
      <p *ngIf="searchTerm">La ricerca "{{ searchTerm }}" non ha prodotto risultati.</p>
      <p *ngIf="!searchTerm">Non ci sono ancora ristoranti. Creane uno!</p>
      <a routerLink="/restaurants/new" class="create-button">Crea Ristorante</a>
    </div>
    
    <!-- Restaurant grid -->
    <div *ngIf="restaurants.length > 0" class="restaurant-grid">
      <div *ngFor="let restaurant of restaurants" class="restaurant-card">
        <a [routerLink]="['/restaurants', restaurant.id]" class="restaurant-link">
          <div class="restaurant-image">
            <img [src]="restaurant.imageUrl || 'assets/images/restaurant-placeholder.jpg'" [alt]="restaurant.name">
          </div>
          <div class="restaurant-info">
            <h3>{{ restaurant.name }}</h3>
            <p class="restaurant-description">{{ restaurant.description | slice:0:100 }}{{ restaurant.description.length > 100 ? '...' : '' }}</p>
            <div class="restaurant-meta">
              <span class="reviews-count">
                <i class="fas fa-comment"></i> {{ restaurant.reviewsCount || 0 }} recensioni
              </span>
              <span class="rating" *ngIf="restaurant.averageRating">
                <i class="fas fa-star"></i> {{ restaurant.averageRating | number:'1.1-1' }}
              </span>
            </div>
          </div>
        </a>
      </div>
    </div>
    
    <!-- Pagination -->
    <div *ngIf="totalPages > 1" class="pagination">
      <button 
        class="pagination-button" 
        [disabled]="currentPage === 1"
        (click)="prevPage()"
      >
        <i class="fas fa-chevron-left"></i>
      </button>
      
      <button 
        *ngFor="let page of pageNumbers" 
        class="pagination-button" 
        [class.active]="page === currentPage"
        (click)="onPageChange(page)"
      >
        {{ page }}
      </button>
      
      <button 
        class="pagination-button" 
        [disabled]="currentPage === totalPages"
        (click)="nextPage()"
      >
        <i class="fas fa-chevron-right"></i>
      </button>
    </div>
  </div>
  
  <!-- Floating action button to create new restaurant -->
  <div class="fab-container">
    <a routerLink="/restaurants/new" class="fab-button">
      <i class="fas fa-plus"></i>
    </a>
  </div>
</div>



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\restaurants\restaurant-list\rest-list.component.scss
============================================
.restaurant-list-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  position: relative;
  min-height: 70vh;
  
  .search-section {
    text-align: center;
    margin-bottom: 40px;
    
    h1 {
      font-size: 2.5rem;
      margin-bottom: 10px;
      color: #333;
    }
    
    p {
      font-size: 1.1rem;
      color: #666;
      margin-bottom: 20px;
    }
    
    .search-bar {
      display: flex;
      max-width: 600px;
      margin: 0 auto;
      
      input {
        flex: 1;
        padding: 12px 16px;
        border: 2px solid #ddd;
        border-radius: 4px 0 0 4px;
        font-size: 16px;
        outline: none;
        transition: border-color 0.3s;
        
        &:focus {
          border-color: #007bff;
        }
      }
      
      .search-button {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 0 4px 4px 0;
        cursor: pointer;
        transition: background-color 0.3s;
        
        &:hover {
          background-color: #0056b3;
        }
        
        i {
          font-size: 16px;
        }
      }
    }
  }
  
  .restaurant-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 30px;
    margin-bottom: 40px;
    
    .restaurant-card {
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 4px 15px rgba(0,0,0,0.1);
      transition: transform 0.3s, box-shadow 0.3s;
      background-color: white;
      
      &:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.15);
      }
      
      .restaurant-link {
        text-decoration: none;
        color: inherit;
        display: block;
      }
      
      .restaurant-image {
        height: 200px;
        overflow: hidden;
        
        img {
          width: 100%;
          height: 100%;
          object-fit: cover;
          transition: transform 0.5s;
          
          &:hover {
            transform: scale(1.05);
          }
        }
      }
      
      .restaurant-info {
        padding: 20px;
        
        h3 {
          font-size: 1.4rem;
          margin-bottom: 10px;
          color: #333;
        }
        
        .restaurant-description {
          color: #666;
          margin-bottom: 15px;
          line-height: 1.5;
        }
        
        .restaurant-meta {
          display: flex;
          justify-content: space-between;
          color: #777;
          font-size: 0.9rem;
          
          i {
            margin-right: 5px;
          }
          
          .reviews-count {
            i {
              color: #007bff;
            }
          }
          
          .rating {
            i {
              color: #ff9800;
            }
          }
        }
      }
    }
  }
  
  .no-results {
    text-align: center;
    padding: 50px 20px;
    background-color: #f9f9f9;
    border-radius: 8px;
    
    h3 {
      font-size: 1.8rem;
      margin-bottom: 15px;
      color: #333;
    }
    
    p {
      color: #666;
      margin-bottom: 20px;
    }
    
    .create-button {
      display: inline-block;
      background-color: #28a745;
      color: white;
      padding: 10px 20px;
      border-radius: 4px;
      text-decoration: none;
      transition: background-color 0.3s;
      
      &:hover {
        background-color: #218838;
      }
    }
  }
  
  .pagination {
    display: flex;
    justify-content: center;
    margin-top: 30px;
    
    .pagination-button {
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 5px;
      border-radius: 4px;
      border: 1px solid #ddd;
      background-color: white;
      cursor: pointer;
      transition: all 0.2s;
      
      &.active {
        background-color: #007bff;
        color: white;
        border-color: #007bff;
      }
      
      &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
      }
      
      &:not(:disabled):hover {
        background-color: #f5f5f5;
      }
    }
  }
  
  .error-message {
    background-color: #f8d7da;
    color: #721c24;
    padding: 15px;
    border-radius: 4px;
    margin-bottom: 20px;
    text-align: center;
  }
  
  .fab-container {
    position: fixed;
    bottom: 30px;
    right: 30px;
    z-index: 99;
    
    .fab-button {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 60px;
      height: 60px;
      background-color: #28a745;
      color: white;
      border-radius: 50%;
      box-shadow: 0 4px 10px rgba(0,0,0,0.2);
      text-decoration: none;
      transition: background-color 0.3s, transform 0.3s;
      
      i {
        font-size: 24px;
      }
      
      &:hover {
        background-color: #218838;
        transform: scale(1.05);
      }
    }
  }
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .restaurant-list-container {
    .restaurant-grid {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
  }
}

@media (max-width: 576px) {
  .restaurant-list-container {
    .restaurant-grid {
      grid-template-columns: 1fr;
    }
    
    .search-section {
      h1 {
        font-size: 2rem;
      }
    }
    
    .fab-container {
      bottom: 20px;
      right: 20px;
    }
  }
}



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\restaurants\restaurant-list\rest-list.component.ts
============================================
import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { Subject, Subscription, debounceTime, distinctUntilChanged } from 'rxjs';

import { Restaurant } from '../../../models/restaurant.model';
import { RestaurantService } from '../../../services/restaurant.service';
import { LoadingSpinnerComponent } from '../../../shared/loading-spinner/loading';

@Component({
  selector: 'app-rest-list',
  standalone: true,
  imports: [CommonModule, RouterModule, FormsModule, LoadingSpinnerComponent],
  templateUrl: './rest-list.component.html',
  styleUrls: ['./rest-list.component.scss']
})
export class RestListComponent implements OnInit, OnDestroy {
  // Dati e stato
  restaurants: Restaurant[] = [];
  loading = false;
  errorMessage = '';
  
  // Parametri di ricerca e paginazione
  searchTerm = '';
  private searchTerms = new Subject<string>();
  private searchSubscription?: Subscription;
  
  currentPage = 1;
  totalRestaurants = 0;
  restaurantsPerPage = 6;

  constructor(private restaurantService: RestaurantService) {}

  ngOnInit(): void {
    // Configurazione della logica di ricerca con debounce
    this.searchSubscription = this.searchTerms.pipe(
      debounceTime(300), // Attendi 300ms dopo l'ultima digitazione
      distinctUntilChanged() // Ignora se il termine è uguale al precedente
    ).subscribe(term => {
      this.searchTerm = term;
      this.currentPage = 1; // Reset alla prima pagina quando cambia la ricerca
      this.loadRestaurants();
    });

    // Carica i ristoranti all'avvio
    this.loadRestaurants();
  }

  ngOnDestroy(): void {
    // Pulizia delle sottoscrizioni per evitare memory leak
    if (this.searchSubscription) {
      this.searchSubscription.unsubscribe();
    }
  }

  /**
   * Gestisce l'input dell'utente nella barra di ricerca
   */
  onSearch(term: string): void {
    this.searchTerms.next(term);
  }

  /**
   * Carica i ristoranti dal server con filtri e paginazione
   */
  loadRestaurants(): void {
    this.loading = true;
    this.errorMessage = '';
    
    this.restaurantService.getRestaurants(
      this.currentPage, 
      this.restaurantsPerPage, 
      this.searchTerm
    ).subscribe({
      next: (response) => {
        this.restaurants = response.restaurants;
        this.totalRestaurants = response.total;
        this.loading = false;
      },
      error: (error) => {
        this.errorMessage = error;
        this.loading = false;
      }
    });
  }

  /**
   * Cambia la pagina corrente e ricarica i ristoranti
   */
  onPageChange(page: number): void {
    if (page !== this.currentPage && page > 0 && page <= this.totalPages) {
      this.currentPage = page;
      this.loadRestaurants();
    }
  }

  /**
   * Gestisce la navigazione alla pagina precedente
   */
  prevPage(): void {
    if (this.currentPage > 1) {
      this.onPageChange(this.currentPage - 1);
    }
  }

  /**
   * Gestisce la navigazione alla pagina successiva
   */
  nextPage(): void {
    if (this.currentPage < this.totalPages) {
      this.onPageChange(this.currentPage + 1);
    }
  }

  /**
   * Calcola il numero totale di pagine in base al numero di risultati
   */
  get totalPages(): number {
    return Math.ceil(this.totalRestaurants / this.restaurantsPerPage);
  }

  /**
   * Genera un array di numeri di pagina da visualizzare nella paginazione
   * Mostra solo un numero limitato di pagine intorno alla pagina corrente
   */
  get pageNumbers(): number[] {
    const pages = [];
    const maxVisiblePages = 5;
    let startPage = Math.max(1, this.currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(this.totalPages, startPage + maxVisiblePages - 1);

    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }

    for (let i = startPage; i <= endPage; i++) {
      pages.push(i);
    }
    
    return pages;
  }
}



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\reviews\review-form\rev-form.component.html
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\reviews\review-form\rev-form.component.scss
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\reviews\review-form\rev-form.component.ts
============================================
import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { Review, CreateReviewDto, UpdateReviewDto } from '../../../models/review.model';
import { ReviewService } from '../../../services/review.service';
import { AuthService } from '../../../services/auth.service';
import { RestaurantService } from '../../../services/restaurant.service';
import { LoadingSpinnerComponent } from '../../../shared/loading-spinner/loading';
import { switchMap, catchError, of } from 'rxjs';

@Component({
  selector: 'app-rev-form',
  standalone: true,
  imports: [
    CommonModule, 
    ReactiveFormsModule,
    RouterModule,
    LoadingSpinnerComponent
  ],
  templateUrl: './rev-form.component.html',
  styleUrls: ['./rev-form.component.scss']
})
export class RevFormComponent implements OnInit {
  // Permette di usare il componente sia inline che come pagina separata
  @Input() restaurantId?: number;
  @Output() reviewSubmitted = new EventEmitter<Review>();
  
  reviewForm!: FormGroup;
  isEditMode = false;
  reviewId?: number;
  loading = false;
  errorMessage = '';
  successMessage = '';
  restaurantName = '';
  maxRating = 5; // Per generare l'array di stelle
  
  // Suggerimenti divertenti per ispirare recensioni umoristiche
  funnyPrompts = [
    'Hai trovato alieni nella cucina?',
    'Il cameriere era un robot travestito?',
    'La pasta aveva poteri magici?',
    'Il tiramisù ti ha fatto levitare?',
    'La pizza parlava lingue straniere?'
  ];
  
  // Seleziona casualmente un suggerimento
  randomPrompt = this.funnyPrompts[Math.floor(Math.random() * this.funnyPrompts.length)];
  
  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private reviewService: ReviewService,
    private authService: AuthService,
    private restaurantService: RestaurantService
  ) {}
  
  /* 
   * Quando vengo inizializzato, controllo che l'utente sia loggato e lo reindirizzo
   * al login se necessario. Creo il form per la recensione e determino se siamo
   * in modalità modifica o creazione controllando i parametri dell'URL.
   * Se ho un ID, carico la recensione esistente; altrimenti cerco l'ID del ristorante
   * per il quale creare una recensione e ne carico i dettagli.
   */
  ngOnInit(): void {
    if (!this.authService.isLoggedIn) {
      // Reindirizza al login se l'utente non è autenticato
      this.router.navigate(['/login'], { 
        queryParams: { returnUrl: this.router.url } 
      });
      return;
    }
    
    // Inizializza il form
    this.createForm();
    
    // Determina la modalità (creazione o modifica)
    this.route.paramMap.pipe(
      switchMap(params => {
        const id = params.get('id');
        
        // Se c'è un ID nella URL, siamo in modalità modifica
        if (id) {
          this.isEditMode = true;
          this.reviewId = +id;
          this.loading = true;
          
          return this.reviewService.getReviewById(+id).pipe(
            catchError(error => {
              this.errorMessage = error;
              this.loading = false;
              return of(null);
            })
          );
        }
        
        // Altrimenti, siamo in modalità creazione
        // Controlla se il restaurantId è stato fornito come parametro
        if (!this.restaurantId) {
          const restId = this.route.snapshot.queryParamMap.get('restaurantId');
          if (restId) {
            this.restaurantId = +restId;
          } else {
            this.errorMessage = 'Nessun ristorante specificato per la recensione.';
            return of(null);
          }
        }
        
        // Carica il nome del ristorante per migliorare l'UX
        if (this.restaurantId) {
          this.loading = true;
          return this.restaurantService.getRestaurantById(this.restaurantId).pipe(
            catchError(error => {
              this.errorMessage = error;
              this.loading = false;
              return of(null);
            })
          );
        }
        
        return of(null);
      })
    ).subscribe(result => {
      this.loading = false;
      
      if (!result) return;
      
      if ('rating' in result) {
        // È una recensione, popoliamo il form per la modifica
        const review = result as Review;
        this.populateForm(review);
        this.restaurantId = review.restaurantId;
        
        // Carica il nome del ristorante
        this.loadRestaurantName(review.restaurantId);
        
        // Verifica che l'utente corrente sia l'autore
        const currentUser = this.authService.getCurrentUser();
        if (!currentUser || currentUser.id !== review.userId) {
          this.errorMessage = 'Non sei autorizzato a modificare questa recensione.';
          this.reviewForm.disable();
        }
      } else {
        // È un ristorante, prendiamo solo il nome
        const restaurant = result;
        this.restaurantName = restaurant.name;
      }
    });
  }
  
  /* 
   * Creo il form con i controlli necessari per la valutazione e il contenuto.
   * Imposto le validazioni per garantire che l'utente inserisca valori corretti:
   * - Rating: obbligatorio, tra 1 e 5
   * - Contenuto: obbligatorio, tra 20 e 1000 caratteri
   */
  private createForm(): void {
    this.reviewForm = this.fb.group({
      rating: [null, [Validators.required, Validators.min(1), Validators.max(5)]],
      content: ['', [Validators.required, Validators.minLength(20), Validators.maxLength(1000)]]
    });
  }
  
  /* 
   * Inserisco i dati della recensione esistente nei rispettivi campi del form.
   * Questo mi permette di mostrare all'utente i valori attuali quando modifica
   * una recensione già pubblicata.
   */
  private populateForm(review: Review): void {
    this.reviewForm.patchValue({
      rating: review.rating,
      content: review.content
    });
  }
  
  /* 
   * Recupero il nome del ristorante usando il suo ID per migliorare l'esperienza 
   * utente. Mostrando il nome del ristorante, l'utente sa per quale locale
   * sta scrivendo la recensione.
   */
  private loadRestaurantName(restaurantId: number): void {
    this.restaurantService.getRestaurantById(restaurantId).subscribe({
      next: (restaurant) => {
        this.restaurantName = restaurant.name;
      },
      error: (error) => {
        console.error('Errore nel caricamento del ristorante:', error);
      }
    });
  }
  
  /* 
   * Aggiorno il valore del rating nel form quando l'utente clicca su una stella.
   * Questo metodo viene chiamato dal template quando l'utente interagisce con
   * il sistema di valutazione a stelle.
   */
  setRating(rating: number): void {
    this.reviewForm.patchValue({ rating });
  }
  
  /* 
   * Gestisco l'invio del form verificando prima la validità dei dati inseriti.
   * Se il form è valido, determino se siamo in modalità modifica o creazione
   * e chiamo il servizio appropriato. Dopo il salvataggio, mostro un messaggio
   * di successo e reindirizzo l'utente o emetto un evento di completamento.
   */
  onSubmit(): void {
    if (this.reviewForm.invalid) {
      // Marca tutti i campi come touched per mostrare gli errori
      Object.keys(this.reviewForm.controls).forEach(key => {
        const control = this.reviewForm.get(key);
        control?.markAsTouched();
      });
      return;
    }
    
    this.loading = true;
    this.errorMessage = '';
    
    const formValue = this.reviewForm.value;
    
    if (this.isEditMode && this.reviewId) {
      // Modalità modifica
      const updateData: UpdateReviewDto = {
        rating: formValue.rating,
        content: formValue.content
      };
      
      this.reviewService.updateReview(this.reviewId, updateData).subscribe({
        next: (review) => {
          this.loading = false;
          this.successMessage = 'La tua recensione è stata aggiornata con successo!';
          
          // Emetti l'evento di completamento
          this.reviewSubmitted.emit(review);
          
          // Reindirizza alla pagina del ristorante dopo un breve ritardo
          setTimeout(() => {
            this.router.navigate(['/restaurants', review.restaurantId]);
          }, 1500);
        },
        error: (error) => {
          this.errorMessage = error;
          this.loading = false;
        }
      });
    } else {
      // Modalità creazione
      if (!this.restaurantId) {
        this.errorMessage = 'ID del ristorante mancante.';
        this.loading = false;
        return;
      }
      
      const createData: CreateReviewDto = {
        restaurantId: this.restaurantId,
        rating: formValue.rating,
        content: formValue.content
      };
      
      this.reviewService.createReview(createData).subscribe({
        next: (review) => {
          this.loading = false;
          this.successMessage = 'La tua recensione è stata pubblicata con successo!';
          this.reviewForm.reset();
          
          // Emetti l'evento di completamento
          this.reviewSubmitted.emit(review);
          
          // Se usato come componente standalone, reindirizza
          if (!this.router.url.includes('/restaurants/')) {
            setTimeout(() => {
              this.router.navigate(['/restaurants', review.restaurantId]);
            }, 1500);
          }
        },
        error: (error) => {
          this.errorMessage = error;
          this.loading = false;
        }
      });
    }
  }
  
  /* 
   * Fornisco un accesso semplificato al controllo del contenuto della recensione.
   * Utilizzo questo getter nel template per verificare la validità e mostrare 
   * gli eventuali messaggi di errore.
   */
  get contentControl() { return this.reviewForm.get('content'); }
  
  /* 
   * Fornisco un accesso semplificato al controllo del rating della recensione.
   * Utilizzo questo getter nel template per verificare la validità e mostrare 
   * gli eventuali messaggi di errore.
   */
  get ratingControl() { return this.reviewForm.get('rating'); }
  
  /* 
   * Creo un array di numeri da 1 a maxRating (5) che utilizzo nel template
   * per generare le stelle cliccabili del sistema di valutazione.
   */
  get ratingArray(): number[] {
    return Array(this.maxRating).fill(0).map((_, index) => index + 1);
  }
}



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\reviews\reviews-list\rev-list.component.html
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\reviews\reviews-list\rev-list.component.scss
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\components\reviews\reviews-list\rev-list.component.ts
============================================
import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { Review } from '../../../models/review.model';
import { ReviewService } from '../../../services/review.service';
import { AuthService } from '../../../services/auth.service';
import { VoteService } from '../../../services/vote.service';
import { LoadingSpinnerComponent } from '../../../shared/loading-spinner/loading';
import { catchError, of } from 'rxjs';
import { VoteType } from '../../../models/vote.model';

@Component({
  selector: 'app-rev-list',
  standalone: true,
  imports: [
    CommonModule,
    RouterModule,
    FormsModule,
    LoadingSpinnerComponent
  ],
  templateUrl: './rev-list.component.html',
  styleUrls: ['./rev-list.component.scss']
})
export class RevListComponent implements OnInit {
  // Input per permettere l'uso del componente sia standalone che integrato
  @Input() restaurantId?: number;
  @Output() reviewDeleted = new EventEmitter<number>();
  
  reviews: Review[] = [];
  loading = false;
  errorMessage = '';
  
  // Parametri per paginazione e ordinamento
  currentPage = 1;
  totalReviews = 0;
  reviewsPerPage = 5;
  sortBy: 'date' | 'votes' = 'date';
  
  // Per la visualizzazione delle recensioni e l'interazione utente
  expandedReviewId: number | null = null;
  voteInProgress = false;
  
  constructor(
    private reviewService: ReviewService,
    private authService: AuthService,
    private voteService: VoteService
  ) {}
  
  /* 
   * All'inizializzazione, carico le recensioni per il ristorante specificato.
   * Se non viene fornito un restaurantId tramite input, controllo i parametri della URL.
   * Imposto i parametri di paginazione e ordinamento e carico i dati dal server.
   */
  ngOnInit(): void {
    if (this.restaurantId) {
      this.loadReviews();
    } else {
      this.errorMessage = 'Nessun ristorante specificato per le recensioni.';
    }
  }
  
  /* 
   * Carico le recensioni dal server applicando i filtri di paginazione e ordinamento.
   * Gestisco lo stato di caricamento e eventuali errori che potrebbero verificarsi.
   * Aggiorno la lista delle recensioni e il conteggio totale per la paginazione.
   */
  loadReviews(): void {
    this.loading = true;
    this.errorMessage = '';
    
    this.reviewService.getReviewsByRestaurant(
      this.restaurantId as number,
      this.currentPage,
      this.reviewsPerPage,
      this.sortBy
    ).pipe(
      catchError(error => {
        this.errorMessage = error;
        this.loading = false;
        return of(null);
      })
    ).subscribe(response => {
      this.loading = false;
      if (response) {
        this.reviews = response.reviews;
        this.totalReviews = response.total;
      }
    });
  }
  
  /* 
   * Cambio il criterio di ordinamento delle recensioni e ricarico i dati.
   * Questo metodo permette agli utenti di vedere le recensioni più recenti,
   * meglio valutate o più utili secondo la community.
   */
  changeSorting(sortOption: 'date' | 'votes'): void {
    this.sortBy = sortOption;
    this.currentPage = 1; // Reset alla prima pagina quando cambia l'ordinamento
    this.loadReviews();
  }
  
  /* 
   * Cambio la pagina corrente e ricarico le recensioni.
   * Controllo che il numero di pagina sia valido prima di effettuare il cambio.
   */
  onPageChange(page: number): void {
    if (page !== this.currentPage && page > 0 && page <= this.totalPages) {
      this.currentPage = page;
      this.loadReviews();
    }
  }
  
  /* 
   * Espando o comprimo una recensione per mostrare o nascondere il testo completo.
   * Le recensioni lunghe vengono troncate nella visualizzazione normale,
   * e l'utente può espanderle per leggerle completamente.
   */
  toggleReviewExpansion(reviewId: number): void {
    if (this.expandedReviewId === reviewId) {
      this.expandedReviewId = null;
    } else {
      this.expandedReviewId = reviewId;
    }
  }
  
  /* 
   * Aggiungo un voto positivo o negativo alla recensione.
   * Prima verifico che l'utente sia autenticato, poi invio la richiesta
   * al server e aggiorno i dati locali per mostrare il risultato immediatamente.
   */
  voteReview(reviewId: number, isUpvote: boolean): void {
    if (!this.authService.isLoggedIn) {
      this.errorMessage = 'Devi essere autenticato per votare una recensione.';
      return;
    }
    
    if (this.voteInProgress) return; // Previene doppi clic
    
    this.voteInProgress = true;
    
    const voteType = isUpvote ? VoteType.UPVOTE : VoteType.DOWNVOTE;
    this.voteService.voteReview(reviewId, voteType).pipe(
      catchError(error => {
        this.errorMessage = error;
        this.voteInProgress = false;
        return of(null);
      })
    ).subscribe(result => {
      this.voteInProgress = false;
      
      if (result) {
        // Aggiorna la recensione votata con i nuovi conteggi
        const reviewIndex = this.reviews.findIndex(r => r.id === reviewId);
        if (reviewIndex !== -1) {
          this.reviews[reviewIndex] = {
            ...this.reviews[reviewIndex],
            upvotes: result.upvotes,
            downvotes: result.downvotes,
            userVote: result.userVote
          };
        }
      }
    });
  }
  
  /* 
   * Elimino una recensione se sono l'autore.
   * Prima chiedo conferma all'utente, poi invio la richiesta al server
   * e rimuovo la recensione dalla lista locale se l'operazione va a buon fine.
   */
  deleteReview(reviewId: number): void {
    if (!confirm('Sei sicuro di voler eliminare questa recensione? L\'azione non può essere annullata.')) {
      return;
    }
    
    this.loading = true;
    
    this.reviewService.deleteReview(reviewId).pipe(
      catchError(error => {
        this.errorMessage = error;
        this.loading = false;
        return of(null);
      })
    ).subscribe(success => {
      this.loading = false;
      
      if (success) {
        // Rimuovi la recensione dalla lista
        this.reviews = this.reviews.filter(r => r.id !== reviewId);
        this.totalReviews--;
        
        // Se la pagina è vuota e non è la prima, vai alla pagina precedente
        if (this.reviews.length === 0 && this.currentPage > 1) {
          this.onPageChange(this.currentPage - 1);
        } else {
          // Altrimenti, ricarica la pagina corrente
          this.loadReviews();
        }
        
        // Emetti un evento per notificare il componente parent
        this.reviewDeleted.emit(reviewId);
      }
    });
  }
  
  /* 
   * Verifico se l'utente corrente è l'autore di una recensione.
   * Questo mi serve per mostrare o nascondere i pulsanti di modifica
   * ed eliminazione per le recensioni.
   */
  isReviewAuthor(review: Review): boolean {
    const currentUser = this.authService.getCurrentUser();
    return currentUser != null && currentUser.id === review.userId;
  }
  
  /* 
   * Fornisco il numero totale di pagine calcolato in base al numero
   * di recensioni totali e al numero di recensioni per pagina.
   */
  get totalPages(): number {
    return Math.ceil(this.totalReviews / this.reviewsPerPage);
  }
  
  /* 
   * Genero un array di numeri di pagina da visualizzare nel paginatore.
   * Mostro solo un sottoinsieme di pagine centrate sulla pagina corrente
   * per non sovraccaricare l'interfaccia quando ci sono molte pagine.
   */
  get pageNumbers(): number[] {
    const pages = [];
    const maxVisiblePages = 5;
    let startPage = Math.max(1, this.currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(this.totalPages, startPage + maxVisiblePages - 1);
    
    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    for (let i = startPage; i <= endPage; i++) {
      pages.push(i);
    }
    
    return pages;
  }
  
  /* 
   * Formatto la data di una recensione in un formato leggibile.
   * Utilizzo le opzioni locali italiane per mostrare giorno, mese e anno.
   */
  formatDate(date: string): string {
    return new Date(date).toLocaleDateString('it-IT', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  }
  
  /* 
   * Genero un array di numeri da 1 a 5 per mostrare le stelle del rating.
   * Questo metodo è coerente con quello nel componente rev-form.
   */
  getRatingArray(rating: number): number[] {
    return Array(5).fill(0).map((_, index) => index < rating ? 1 : 0);
  }
}



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\guards\auth.guard.ts
============================================
import { inject } from '@angular/core';
import { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';
import { AuthService } from '../services/auth.service';

export function authGuard(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
  const authService = inject(AuthService);
  const router = inject(Router);

  /* Verifico se l'utente è autenticato utilizzando il metodo isLoggedIn
     dell'AuthService. Questo metodo controlla la presenza del token e dell'utente.
  */
  if (authService.isLoggedIn) {
    // Se l'utente è autenticato, consento l'accesso alla rotta
    return true;
  }

  /* Se l'utente non è autenticato, lo reindirizzo alla pagina di login
     e salvo l'URL a cui stava tentando di accedere come parametro.
     Questo permetterà di reindirizzarlo alla pagina originale dopo il login.
  */
  return router.createUrlTree(['/login'], { 
    queryParams: { returnUrl: state.url } 
  });
}



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\interceptors\auth-interceptor.ts
============================================
import { HttpInterceptorFn, HttpErrorResponse } from '@angular/common/http';
import { inject } from '@angular/core';
import { AuthService } from '../services/auth.service';
import { Router } from '@angular/router';
import { catchError, throwError } from 'rxjs';

export const authInterceptor: HttpInterceptorFn = (req, next) => {
  /* Uso inject() per ottenere i servizi necessari all'interno 
     della funzione Interceptor.
  */
  const authService = inject(AuthService);
  const router = inject(Router);

  const token = authService.token;

  /* Se un token è presente nel servizio di autenticazione, 
     clono la richiesta e aggiungo l'header Authorization 
     con il formato "Bearer [token]".
  */
  if (token) {
    req = req.clone({
      setHeaders: {
        Authorization: `Bearer ${token}`
      }
    });
  }

  return next(req).pipe(
    /* Gestione degli errori centralizzata: 
       Se il backend ritorna uno stato 401 (Non Autorizzato), 
       significa che il token è scaduto o non valido.
       Eseguo il logout e reindirizzo al login.
    */
    catchError((error: HttpErrorResponse) => {
      if (error.status === 401) {
        authService.logout();
        router.navigate(['/login']);
      }
      return throwError(() => error);
    })
  );
};



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\models\restaurant.model.ts
============================================
export interface Restaurant {
  id: number;
  name: string;
  description: string;
  location: {
    lat: number;
    lng: number;
    address?: string;
  };
  imageUrl: string;
  ownerId: number;
  ownerUsername?: string;
  createdAt: string;
  updatedAt?: string;
  reviewsCount?: number;
  averageRating?: number;
}

export interface CreateRestaurantDto {
  name: string;
  description: string;
  location: {
    lat: number;
    lng: number;
    address?: string;
  };
  image?: File;
}

export interface UpdateRestaurantDto {
  name?: string;
  description?: string;
  location?: {
    lat: number;
    lng: number;
    address?: string;
  };
  image?: File;
}



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\models\review.model.ts
============================================
export interface Review {
  id: number;
  restaurantId: number;
  userId: number;
  username: string;
  content: string;
  rating: number;
  upvotes: number;
  downvotes: number;
  userVote?: number; // -1 per downvote, 0 per nessun voto, 1 per upvote
  createdAt: string;
  updatedAt?: string;
}

export interface CreateReviewDto {
  restaurantId: number;
  content: string;
  rating: number;
}

export interface UpdateReviewDto {
  content?: string;
  rating?: number;
}



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\models\user.model.ts
============================================
export interface User {
  id: number;
  username: string;
  email?: string;
  createdAt?: string;
  updatedAt?: string;
  restaurantsCount?: number;
  reviewsCount?: number;
}

export interface UserProfile extends User {
  bio?: string;
  avatarUrl?: string;
  totalUpvotesReceived?: number;
  totalDownvotesReceived?: number;
}

export interface UpdateUserDto {
  username?: string;
  email?: string;
  password?: string;
  bio?: string;
  avatar?: File;
}



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\models\vote.model.ts
============================================
export interface Vote {
  upvotes: number;
  downvotes: number;
  userVote: number | undefined;
  id: number;
  reviewId: number;
  userId: number;
  voteType: VoteType;
  createdAt: string;
  updatedAt?: string;
}

export enum VoteType {
  DOWNVOTE = -1,
  UPVOTE = 1
}

export interface CreateVoteDto {
  reviewId: number;
  voteType: VoteType;
}



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\services\auth.service.ts
============================================
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { BehaviorSubject, Observable, tap, catchError, throwError } from 'rxjs';
import { User } from '../models/user.model';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private apiUrl = 'http://localhost:3000/api/auth';
  private userSubject = new BehaviorSubject<User | null>(null);
  
  constructor(private http: HttpClient) { 
    this.loadUserFromStorage();
  }
  
  get currentUser$(): Observable<User | null> {
    return this.userSubject.asObservable();
  }
  
  // Accesso sincrono all'utente corrente
  getCurrentUser(): User | null {
    return this.userSubject.value;
  }
  
  get isLoggedIn(): boolean {
    return !!this.userSubject.value;
  }
  
  get token(): string | null {
    return localStorage.getItem('token');
  }
  
  register(username: string, email: string, password: string): Observable<any> {
    return this.http.post(`${this.apiUrl}/register`, { username, email, password })
      .pipe(
        catchError(this.handleError)
      );
  }
  
  login(username: string, password: string): Observable<any> {
    return this.http.post<{token: string, userId: number}>(`${this.apiUrl}/login`, { username, password })
      .pipe(
        tap(response => {
          /* 
          Salvo il token e le informazioni dell'utente nel localStorage.
          Questa logica viene eseguita solo in caso di successo.
          */
          localStorage.setItem('token', response.token);
          const user: User = {
            id: response.userId,
            username
          };
          localStorage.setItem('user', JSON.stringify(user));
          this.userSubject.next(user);
        }),
        catchError(this.handleError)
      );
  }
  
  logout(): void {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    this.userSubject.next(null);
  }
  
  private loadUserFromStorage(): void {
    const token = localStorage.getItem('token');
    const user = localStorage.getItem('user');
    
    if (token && user) {
      this.userSubject.next(JSON.parse(user));
    }
  }

  private handleError(error: HttpErrorResponse): Observable<never> {
    let userMessage = 'Autenticazione fallita. Riprova.';
    
    /* 
      Gestione Errore HTTP:
      1. Controlliamo lo stato 401 per le credenziali non valide.
      2. Usiamo il messaggio del backend (error.error.message) come fallback.
    */
    if (error.status === 401) {
      userMessage = 'Nome utente o password non validi.';
    } else if (error.error?.message) {
      userMessage = error.error.message;
    }
    
    console.error('Auth Service Error:', error);
    
    return throwError(() => userMessage);
  }
}



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\services\restaurant.service.ts
============================================
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError, of } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { Restaurant, CreateRestaurantDto, UpdateRestaurantDto } from '../models/restaurant.model';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root'
})
export class RestaurantService {
  private apiUrl = 'http://localhost:3000/api/restaurants';
  
  constructor(
    private http: HttpClient,
    private authService: AuthService
  ) {}
  
  /* Ottiene la lista di tutti i ristoranti.
     Supporta la paginazione e il filtraggio per nome.
  */
  getRestaurants(page: number = 1, limit: number = 10, searchTerm?: string): Observable<{restaurants: Restaurant[], total: number}> {
    let params = new HttpParams()
      .set('page', page.toString())
      .set('limit', limit.toString());
    
    if (searchTerm) {
      params = params.set('search', searchTerm);
    }
    
    return this.http.get<{restaurants: Restaurant[], total: number}>(this.apiUrl, { params })
      .pipe(
        catchError(this.handleError)
      );
  }
  
  /* Ottiene i dettagli di un ristorante specifico tramite il suo ID.
  */
  getRestaurantById(id: number): Observable<Restaurant> {
    return this.http.get<Restaurant>(`${this.apiUrl}/${id}`)
      .pipe(
        catchError(this.handleError)
      );
  }
  
  /* Crea un nuovo ristorante con i dati forniti.
     Poiché è necessario caricare un'immagine, uso FormData invece di JSON.
  */
  createRestaurant(restaurantData: CreateRestaurantDto): Observable<Restaurant> {
    const formData = new FormData();
    formData.append('name', restaurantData.name);
    formData.append('description', restaurantData.description);
    formData.append('location', JSON.stringify(restaurantData.location));
    
    if (restaurantData.image) {
      formData.append('image', restaurantData.image, restaurantData.image.name);
    }
    
    return this.http.post<Restaurant>(this.apiUrl, formData)
      .pipe(
        catchError(this.handleError)
      );
  }
  
  /* Aggiorna un ristorante esistente con i nuovi dati.
     Supporta aggiornamenti parziali (solo i campi che sono stati modificati).
  */
  updateRestaurant(id: number, restaurantData: UpdateRestaurantDto): Observable<Restaurant> {
    const formData = new FormData();
    
    if (restaurantData.name) {
      formData.append('name', restaurantData.name);
    }
    
    if (restaurantData.description) {
      formData.append('description', restaurantData.description);
    }
    
    if (restaurantData.location) {
      formData.append('location', JSON.stringify(restaurantData.location));
    }
    
    if (restaurantData.image) {
      formData.append('image', restaurantData.image, restaurantData.image.name);
    }
    
    return this.http.put<Restaurant>(`${this.apiUrl}/${id}`, formData)
      .pipe(
        catchError(this.handleError)
      );
  }
  
  /* Elimina un ristorante specifico tramite il suo ID.
     Questa operazione elimina anche tutte le recensioni associate.
  */
  deleteRestaurant(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`)
      .pipe(
        catchError(this.handleError)
      );
  }
  
  /* Verifica se l'utente corrente è il proprietario del ristorante.
     Utile per mostrare/nascondere i pulsanti di modifica e eliminazione.
  */
  canEditRestaurant(restaurantId: number): Observable<boolean> {
    return this.http.get<{ownerId: number}>(`${this.apiUrl}/${restaurantId}/owner`)
      .pipe(
        map(response => {
          const currentUser = this.authService.getCurrentUser();
          return currentUser?.id === response.ownerId;
        }),
        catchError(() => of(false))
      );
  }
  
  /* Ottiene i ristoranti creati dall'utente corrente.
     Utile per mostrare una lista nella pagina profilo dell'utente.
  */
  getUserRestaurants(userId: number, page: number = 1, limit: number = 10): Observable<{restaurants: Restaurant[], total: number}> {
    let params = new HttpParams()
      .set('page', page.toString())
      .set('limit', limit.toString());
    
    return this.http.get<{restaurants: Restaurant[], total: number}>(`${this.apiUrl}/user/${userId}`, { params })
      .pipe(
        catchError(this.handleError)
      );
  }
  
  /* Gestisce gli errori HTTP e restituisce messaggi d'errore comprensibili.
  */
  private handleError(error: HttpErrorResponse): Observable<never> {
    let errorMessage = 'Si è verificato un errore. Riprova più tardi.';
    
    if (error.error instanceof ErrorEvent) {
      // Errore lato client
      errorMessage = `Errore: ${error.error.message}`;
    } else {
      // Errore lato server
      if (error.error?.message) {
        errorMessage = error.error.message;
      } else {
        switch (error.status) {
          case 400:
            errorMessage = 'Dati non validi.';
            break;
          case 404:
            errorMessage = 'Ristorante non trovato.';
            break;
          case 403:
            errorMessage = 'Non hai i permessi per eseguire questa operazione.';
            break;
        }
      }
    }
    
    console.error('Restaurant Service Error:', error);
    
    return throwError(() => errorMessage);
  }
}



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\services\review.service.ts
============================================
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { Review, CreateReviewDto, UpdateReviewDto } from '../models/review.model';

@Injectable({
  providedIn: 'root'
})
export class ReviewService {
  private apiUrl = 'http://localhost:3000/api/reviews';
  
  constructor(private http: HttpClient) {}
  
  /* Ottiene tutte le recensioni per un ristorante specifico.
     Supporta la paginazione e l'ordinamento per voti o data.
  */
  getReviewsByRestaurant(
    restaurantId: number, 
    page: number = 1, 
    limit: number = 10,
    sortBy: 'votes' | 'date' = 'votes'
  ): Observable<{ reviews: Review[], total: number }> {
    let params = new HttpParams()
      .set('page', page.toString())
      .set('limit', limit.toString())
      .set('sortBy', sortBy);
    
    return this.http.get<{ reviews: Review[], total: number }>(`${this.apiUrl}/restaurant/${restaurantId}`, { params })
      .pipe(
        catchError(this.handleError)
      );
  }
  
  /* Ottiene una recensione specifica tramite il suo ID.
  */
  getReviewById(id: number): Observable<Review> {
    return this.http.get<Review>(`${this.apiUrl}/${id}`)
      .pipe(
        catchError(this.handleError)
      );
  }
  
  /* Ottiene tutte le recensioni scritte dall'utente corrente.
     Utile per la sezione profilo.
  */
  getUserReviews(
    userId: number,
    page: number = 1, 
    limit: number = 10
  ): Observable<{ reviews: Review[], total: number }> {
    let params = new HttpParams()
      .set('page', page.toString())
      .set('limit', limit.toString());
    
    return this.http.get<{ reviews: Review[], total: number }>(`${this.apiUrl}/user/${userId}`, { params })
      .pipe(
        catchError(this.handleError)
      );
  }
  
  /* Crea una nuova recensione per un ristorante.
  */
  createReview(reviewData: CreateReviewDto): Observable<Review> {
    return this.http.post<Review>(this.apiUrl, reviewData)
      .pipe(
        catchError(this.handleError)
      );
  }
  
  /* Aggiorna una recensione esistente.
     Solo l'autore può modificare una recensione.
     Il backend gestirà l'autorizzazione, restituendo 403 se non autorizzato.
  */
  updateReview(id: number, reviewData: UpdateReviewDto): Observable<Review> {
    return this.http.patch<Review>(`${this.apiUrl}/${id}`, reviewData)
      .pipe(
        catchError(this.handleError)
      );
  }
  
  /* Elimina una recensione specifica.
     Solo l'autore può eliminare una recensione.
     Il backend gestirà l'autorizzazione, restituendo 403 se non autorizzato.
  */
  deleteReview(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`)
      .pipe(
        catchError(this.handleError)
      );
  }
  
  /* Aggiunge un voto positivo (upvote) a una recensione.
     Se l'utente aveva già votato positivamente, il voto viene rimosso.
     Se l'utente aveva votato negativamente, il voto viene cambiato in positivo.
  */
  upvoteReview(reviewId: number): Observable<Review> {
    return this.http.post<Review>(`${this.apiUrl}/${reviewId}/upvote`, {})
      .pipe(
        catchError(this.handleError)
      );
  }
  
  /* Aggiunge un voto negativo (downvote) a una recensione.
     Se l'utente aveva già votato negativamente, il voto viene rimosso.
     Se l'utente aveva votato positivamente, il voto viene cambiato in negativo.
  */
  downvoteReview(reviewId: number): Observable<Review> {
    return this.http.post<Review>(`${this.apiUrl}/${reviewId}/downvote`, {})
      .pipe(
        catchError(this.handleError)
      );
  }
  
  /* Rimuove il voto dell'utente da una recensione.
  */
  removeVote(reviewId: number): Observable<Review> {
    return this.http.delete<Review>(`${this.apiUrl}/${reviewId}/vote`)
      .pipe(
        catchError(this.handleError)
      );
  }
  
  /* Gestisce gli errori HTTP e restituisce messaggi d'errore comprensibili.
  */
  private handleError(error: HttpErrorResponse): Observable<never> {
    let errorMessage = 'Si è verificato un errore. Riprova più tardi.';
    
    if (error.error instanceof ErrorEvent) {
      // Errore lato client
      errorMessage = `Errore: ${error.error.message}`;
    } else {
      // Errore lato server
      if (error.error?.message) {
        errorMessage = error.error.message;
      } else {
        switch (error.status) {
          case 400:
            errorMessage = 'Dati non validi per la recensione.';
            break;
          case 404:
            errorMessage = 'Recensione non trovata.';
            break;
          case 403:
            errorMessage = 'Non hai i permessi per eseguire questa operazione.';
            break;
        }
      }
    }
    
    console.error('Review Service Error:', error);
    
    return throwError(() => errorMessage);
  }
}



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\services\vote.service.ts
============================================
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError, of } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { Vote, VoteType, CreateVoteDto } from '../models/vote.model';

@Injectable({
  providedIn: 'root'
})
export class VoteService {
  private apiUrl = 'http://localhost:3000/api/votes';
  
  constructor(private http: HttpClient) {}
  
  /* Aggiunge o aggiorna un voto per una recensione.
     Se l'utente non ha ancora votato, crea un nuovo voto.
     Se l'utente ha già votato con lo stesso tipo, rimuove il voto (toggle).
     Se l'utente ha già votato con un tipo diverso, cambia il tipo di voto.
  */
  voteReview(reviewId: number, voteType: VoteType): Observable<Vote> {
    const voteData: CreateVoteDto = { reviewId, voteType };
    
    return this.http.post<Vote>(this.apiUrl, voteData)
      .pipe(
        catchError(this.handleError)
      );
  }
  
  /* Funzione di utilità per aggiungere un upvote.
     Utilizza internamente il metodo voteReview.
  */
  upvoteReview(reviewId: number): Observable<Vote> {
    return this.voteReview(reviewId, VoteType.UPVOTE);
  }
  
  /* Funzione di utilità per aggiungere un downvote.
     Utilizza internamente il metodo voteReview.
  */
  downvoteReview(reviewId: number): Observable<Vote> {
    return this.voteReview(reviewId, VoteType.DOWNVOTE);
  }
  
  /* Rimuove il voto dell'utente corrente da una recensione specifica.
  */
  removeVote(reviewId: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/review/${reviewId}`)
      .pipe(
        catchError(this.handleError)
      );
  }
  
  /* Ottiene il voto corrente dell'utente per una recensione specifica.
     Restituisce null se l'utente non ha ancora votato.
     Utile per evidenziare il pulsante attivo nell'interfaccia utente.
  */
  getUserVoteForReview(reviewId: number): Observable<Vote | null> {
    return this.http.get<Vote | null>(`${this.apiUrl}/review/${reviewId}/user`)
      .pipe(
        catchError(error => {
          // Se l'errore è 404 (nessun voto trovato), restituisco null come valore valido
          if (error.status === 404) {
            return of(null);  
          }
          return this.handleError(error);
        })
      );
  }
  
  /* Ottiene tutti i voti per una recensione specifica.
     Utile per analisi o statistiche dettagliate.
  */
  getVotesByReview(reviewId: number): Observable<Vote[]> {
    return this.http.get<Vote[]>(`${this.apiUrl}/review/${reviewId}`)
      .pipe(
        catchError(this.handleError)
      );
  }
  
  /* Ottiene tutti i voti effettuati dall'utente corrente.
     Utile per la sezione profilo dell'utente.
  */
  getUserVotes(): Observable<Vote[]> {
    return this.http.get<Vote[]>(`${this.apiUrl}/user`)
      .pipe(
        catchError(this.handleError)
      );
  }
  
  /* Gestisce gli errori HTTP e restituisce messaggi d'errore comprensibili.
  */
  private handleError(error: HttpErrorResponse): Observable<never> {
    let errorMessage = 'Si è verificato un errore durante la gestione del voto.';
    
    if (error.error instanceof ErrorEvent) {
      // Errore lato client
      errorMessage = `Errore: ${error.error.message}`;
    } else {
      // Errore lato server
      if (error.error?.message) {
        errorMessage = error.error.message;
      } else {
        switch (error.status) {
          case 400:
            errorMessage = 'Richiesta di voto non valida.';
            break;
          case 401:
            errorMessage = 'Devi effettuare l\'accesso per votare.';
            break;
          case 403:
            errorMessage = 'Non hai i permessi per eseguire questa operazione.';
            break;
          case 404:
            errorMessage = 'Recensione non trovata.';
            break;
          case 409:
            errorMessage = 'Hai già votato questa recensione.';
            break;
        }
      }
    }
    
    console.error('Vote Service Error:', error);
    
    return throwError(() => errorMessage);
  }
}



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\shared\footer\footer.html
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\shared\footer\footer.scss
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\shared\footer\footer.ts
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\shared\loading-spinner\loading.html
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\shared\loading-spinner\loading.scss
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\shared\loading-spinner\loading.ts
============================================
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-loading-spinner',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div class="spinner-container">
      <div class="spinner"></div>
      <p>Caricamento in corso...</p>
    </div>
  `,
  styles: [`
    .spinner-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 30px;
    }
    
    .spinner {
      width: 50px;
      height: 50px;
      border: 4px solid rgba(0, 123, 255, 0.1);
      border-radius: 50%;
      border-top-color: #007bff;
      animation: spin 1s linear infinite;
      margin-bottom: 15px;
    }
    
    p {
      color: #666;
      font-size: 1.1rem;
    }
    
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
  `]
})
export class LoadingSpinnerComponent {}



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\shared\navbar\navbar.html
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\shared\navbar\navbar.scss
============================================



============================================
FILEPATH: C:\Users\beatr\OneDrive\Desktop\ProgettoTecWeb\frontend\src\app\shared\navbar\navbar.ts
============================================



